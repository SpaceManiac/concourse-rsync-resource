#!/usr/bin/env bash
set -euo pipefail

script_input='/tmp/input'
cat > $script_input <&0 # STDIN params

server=$(jq -r '(.source.servers + [.source.server])[0]' < $script_input)
port=$(jq -r '.source.port // ""' < $script_input)
user=$(jq -r '.source.user // ""' < $script_input)
base_dir=$(jq -r '.source.base_dir // ""' < $script_input)
version=$(jq -r '.version.ref // ""' < $script_input)

# Default to port 22.
port=${port:-22}
printf -v rsh '%q ' ssh -p "$port"

# Print configuration results.
printf '%s=%s\n' \
  server "$server" \
  port "$port" \
  user "$user" \
  base_dir "$base_dir" \
  version "$version" \
  >&2

# Configure SSH.
mkdir -p ~/.ssh
chmod 600 ~/.ssh
eval "$(ssh-agent)" >/dev/null
jq -r '.source.known_hosts // empty' < $script_input > ~/.ssh/known_hosts
jq -r '.source.private_key // empty' < $script_input | SSH_ASKPASS=/opt/resource/askpass.sh DISPLAY='' ssh-add - >/dev/null

# Perform the directory listing.
versions=()
if jq -re '.source.disable_version_path' < $script_input >/dev/null; then
  # Adding an extra / here asserts that it's a directory. rsync will error if not.
  if rsync --list-only --rsh "$rsh" "$user@$server:$base_dir/" >&2; then
    dir=${base_dir##*/}
    printf 'taking base directory as sole version: %s\n' "$dir" >&2
    versions+=("$dir")
  fi
else
  # List directory, skip first line (entry for `.`), sort from oldest to newest,
  # cut to filenames only, then read into $versions.
  # Lines look like: drwxrwxr-x          4,096 2024/11/01 01:23:45 filename
  # NOTE: handles spaces and printable characters fine, but chokes on
  # backslashes or nonprintable characters that get octal-escaped like `\#000`.
  readarray -t versions < <(
    rsync --list-only --rsh "$rsh" "$user@$server:$base_dir/" \
    | tee >(cat >&2) \
    | { read -r; cat; } \
    | sort -k 3,4 \
    | cut -b 47-
  )
fi
jq -n '$ARGS.positional | [{ref: .[]}]' --args "${versions[@]}"
