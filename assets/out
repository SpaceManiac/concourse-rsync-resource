#!/usr/bin/env bash
set -euo pipefail

SRC_DIR=$1

SCRIPT_INPUT='/tmp/input'
cat > $SCRIPT_INPUT <&0 # STDIN params

readarray -d '' SERVERS < <(jq --raw-output0 '(.source.servers + [.source.server])[]' < $SCRIPT_INPUT)
PORT=$(jq -r '.source.port // ""' < $SCRIPT_INPUT)
USER=$(jq -r '.source.user // ""' < $SCRIPT_INPUT)
BASE_DIR=$(jq -r '.source.base_dir // ""' < $SCRIPT_INPUT)
SYNC_DIR=$(jq -r '.params.sync_dir // ""' < $SCRIPT_INPUT)
VERSION=$(jq -r '.params.version // ""' < $SCRIPT_INPUT)
readarray -d '' RSYNC_OPTS < <(jq --raw-output0 '(.params.rsync_opts // ["--partial", "--progress", "--archive", "--verbose"])[]' < $SCRIPT_INPUT)

if test -z "$VERSION"; then
  # Due to `set -e`, this will correctly fail if this is a one-off build.
  VERSION="$BUILD_PIPELINE_NAME-$BUILD_JOB_NAME-$BUILD_NAME"
fi

# Default to port 22.
PORT=${PORT:-22}

# Combine base dir and input sync dir for partial uploads.
if test "$SYNC_DIR"; then
  SRC_DIR=$SRC_DIR/$SYNC_DIR
fi

# Combine base dir and output version.
if jq -re '.source.disable_version_path' < $SCRIPT_INPUT >/dev/null; then
  DEST_DIR=$BASE_DIR
else
  DEST_DIR=$BASE_DIR/$VERSION
fi

# Print configuration results.
printf 'SERVERS=('; printf '%q ' "${SERVERS[@]}"; printf ')\n'
printf '%s=%s\n' \
  PORT "$PORT" \
  USER "$USER" \
  BASE_DIR "$BASE_DIR" \
  VERSION "$VERSION" \
  SRC_DIR "$SRC_DIR" \
  DEST_DIR "$DEST_DIR" \
  >&2
printf 'RSYNC_OPTS=('; printf '%q ' "${RSYNC_OPTS[@]}"; printf ')\n'

# Configure SSH.
mkdir -p ~/.ssh
(jq -r '.source.private_key // empty' < $SCRIPT_INPUT) > ~/.ssh/server_key
printf "Host %s\n\tStrictHostKeyChecking no\n" "${SERVERS[@]}" > ~/.ssh/config
chmod -R 600 ~/.ssh
eval "$(ssh-agent)" >/dev/null
SSH_ASKPASS=/opt/resource/askpass.sh DISPLAY='' ssh-add ~/.ssh/server_key >/dev/null

# Perform the upload.
for SERVER in "${SERVERS[@]}"; do
  (
    set -x
    rsync "${RSYNC_OPTS[@]}" --rsh "ssh -i ~/.ssh/server_key -p ${PORT@Q}" "$SRC_DIR/" "$USER@$SERVER:$DEST_DIR/" >&2
  )
done
