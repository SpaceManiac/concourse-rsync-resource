#!/usr/bin/env bash
set -euo pipefail

src_dir=$1

script_input='/tmp/input'
cat > $script_input <&0 # STDIN params

readarray -d '' servers < <(jq --raw-output0 '(.source.servers + [.source.server])[]' < $script_input)
port=$(jq -r '.source.port // ""' < $script_input)
user=$(jq -r '.source.user // ""' < $script_input)
base_dir=$(jq -r '.source.base_dir // ""' < $script_input)
sync_dir=$(jq -r '.params.sync_dir // ""' < $script_input)
version=$(jq -r '.params.version // ""' < $script_input)
readarray -d '' rsync_opts < <(jq --raw-output0 '(.params.rsync_opts // ["--verbose", "--archive", "--mkpath"])[]' < $script_input)

if test -z "$version"; then
  # Due to `set -e`, this will correctly fail if this is a one-off build.
  version="$BUILD_PIPELINE_NAME-$BUILD_JOB_NAME-$BUILD_NAME"
fi

# Default to port 22.
port=${port:-22}
printf -v rsh '%q ' ssh -p "$port"

# Combine base dir and input sync dir for partial uploads.
if test "$sync_dir"; then
  src_dir=$src_dir/$sync_dir
fi

# Combine base dir and output version.
if jq -re '.source.disable_version_path' < $script_input >/dev/null; then
  dest_dir=$base_dir
else
  dest_dir=$base_dir/$version
fi

# Print configuration results.
{
  printf 'servers=('; printf '%q ' "${servers[@]}"; printf ')\n'
  printf '%s=%s\n' \
    port "$port" \
    user "$user" \
    base_dir "$base_dir" \
    version "$version" \
    src_dir "$src_dir" \
    dest_dir "$dest_dir"
  printf 'rsync_opts=('; printf '%q ' "${rsync_opts[@]}"; printf ')\n'
} >&2

# Configure SSH.
mkdir -p ~/.ssh
printf "Host %s\n\tStrictHostKeyChecking no\n" "${servers[@]}" > ~/.ssh/config
chmod -R 600 ~/.ssh
eval "$(ssh-agent)" >/dev/null
(jq -r '.source.private_key // empty' < $script_input) | SSH_ASKPASS=/opt/resource/askpass.sh DISPLAY='' ssh-add - >/dev/null

# Perform the upload.
for server in "${servers[@]}"; do
  (
    set -x
    rsync "${rsync_opts[@]}" --rsh "$rsh" "$src_dir/" "$user@$server:$dest_dir/" >&2
  )
done
jq -n '{version: {ref: $ARGS.positional[0]}}' --args "$version"
